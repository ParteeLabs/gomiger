// THIS FILE IS GENERATED BY GOMIGER. PLEASE DO NOT MODIFY IT.
//
//nolint:revive
package migrations

import (
	"context"
	"fmt"
	"log"
	"os"

	"github.com/ParteeLabs/gomiger/core"
	"github.com/ParteeLabs/gomiger/core/generator"
	"github.com/urfave/cli/v3"
)

var rcPath string

// Run starts the CLI
func Run() {
	cmd := &cli.Command{
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:        "rc-path",
				Category:    "global",
				Value:       "./gomiger.rc.yaml",
				Usage:       "Path to the gomiger.rc file",
				Destination: &rcPath,
			},
		},
		Commands: []*cli.Command{
			newCmd,
			migrateUpCmd,
			migrateDownCmd,
			getMigrationStatusCmd,
		},
	}
	if err := cmd.Run(context.Background(), os.Args); err != nil {
		log.Fatal(err)
	}
}

var newCmd = &cli.Command{
	Name:    "new",
	Aliases: []string{"n"},
	Usage:   "generate a new migration",
	Action: func(_ context.Context, cmd *cli.Command) error {
		rc, err := core.GetGomigerRC(rcPath)
		if err != nil {
			return fmt.Errorf("cannot load the gomiger.rc file: %w", err)
		}
		if !generator.IsSrcCodeInitialized(rc) {
			return fmt.Errorf("the source code is NOT INITIALIZED")
		}
		if err := generator.GenMigrationFile(rc, cmd.Args().Get(0)); err != nil {
			return fmt.Errorf("cannot generate migration file: %w", err)
		}
		return nil
	},
}

var migrateUpCmd = &cli.Command{
	Name:    "up",
	Aliases: []string{"m"},
	Usage:   "migrate the database up to a version",
	Action: func(ctx context.Context, cmd *cli.Command) error {
		rc, err := core.GetGomigerRC(rcPath)
		if err != nil {
			return fmt.Errorf("cannot load the gomiger.rc file: %w", err)
		}
		if !generator.IsSrcCodeInitialized(rc) {
			return fmt.Errorf("the source code is NOT INITIALIZED")
		}
		migrator := NewMigrator(&core.GomigerConfig{})
		if err := migrator.Connect(ctx); err != nil {
			return fmt.Errorf("cannot connect to database: %w", err)
		}
		if err := migrator.Up(ctx, cmd.Args().Get(0)); err != nil {
			return fmt.Errorf("cannot migrate the database: %w", err)
		}
		return nil
	},
}

var migrateDownCmd = &cli.Command{
	Name:    "down",
	Aliases: []string{"d"},
	Usage:   "migrate the database down to a version",
	Action: func(ctx context.Context, cmd *cli.Command) error {
		rc, err := core.GetGomigerRC(rcPath)
		if err != nil {
			return fmt.Errorf("cannot load the gomiger.rc file: %w", err)
		}
		if !generator.IsSrcCodeInitialized(rc) {
			return fmt.Errorf("the source code is NOT INITIALIZED")
		}
		migrator := NewMigrator(&core.GomigerConfig{})
		if err := migrator.Connect(ctx); err != nil {
			return fmt.Errorf("cannot connect to database: %w", err)
		}
		if err := migrator.Down(ctx, cmd.Args().Get(0)); err != nil {
			return fmt.Errorf("cannot migrate the database: %w", err)
		}
		return nil
	},
}

var getMigrationStatusCmd = &cli.Command{
	Name:    "status",
	Aliases: []string{"s"},
	Usage:   "get the current migration status",
	Action: func(ctx context.Context, cmd *cli.Command) error {
		rc, err := core.GetGomigerRC(rcPath)
		if err != nil {
			return fmt.Errorf("cannot load the gomiger.rc file: %w", err)
		}
		if !generator.IsSrcCodeInitialized(rc) {
			return fmt.Errorf("the source code is NOT INITIALIZED")
		}
		migrator := NewMigrator(&core.GomigerConfig{})
		if err := migrator.Connect(ctx); err != nil {
			return fmt.Errorf("cannot connect to database: %w", err)
		}
		schema, err := migrator.GetSchema(ctx, cmd.Args().Get(0))
		if err != nil {
			return fmt.Errorf("cannot get schema: %w", err)
		}
		fmt.Printf("Version: %s, Status: %s\n", schema.Version, schema.Status)
		return nil
	},
}
